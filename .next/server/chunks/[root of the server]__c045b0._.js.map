{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n\r\nconst connectDB = async () => {\r\n  if (mongoose.connections[0].readyState) return;\r\n  await mongoose.connect(process.env.MONGODB_URI);\r\n};\r\n\r\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,YAAY;IAChB,IAAI,iGAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IACxC,MAAM,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW;AAChD;uCAEe"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/models/HotDeal.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst hotDealSchema = new mongoose.Schema({\r\n  from: { type: String, required: true },\r\n  to: { type: String, required: true },\r\n  departure: { type: Date, required: true },\r\n  returnDate: { type: Date, required: true },\r\n  class: { type: String, required: true },\r\n  priceFrom: { type: Number, required: true },\r\n  type: { type: String, enum: [\"flight\", \"package\", \"cruise\"], required: true }, // Type of deal\r\n});\r\n\r\nexport default mongoose.models.HotDeal || mongoose.model(\"HotDeal\", hotDealSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACxC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,IAAI;QAAE,MAAM;QAAQ,UAAU;IAAK;IACnC,WAAW;QAAE,MAAM;QAAM,UAAU;IAAK;IACxC,YAAY;QAAE,MAAM;QAAM,UAAU;IAAK;IACzC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,WAAW;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC1C,MAAM;QAAE,MAAM;QAAQ,MAAM;YAAC;YAAU;YAAW;SAAS;QAAE,UAAU;IAAK;AAC9E;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,WAAW"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/api/auth/hotdeals/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport dbConnect from '../../../lib/mongodb';\r\nimport HotDeal from '../../../models/HotDeal'; \r\n\r\nexport async function GET() {\r\n  try {\r\n    // Connect to the database\r\n    await dbConnect();\r\n\r\n    // Fetch all hot deals\r\n    const hotDeals = await HotDeal.find({});\r\n    // console.log(hotDeals)\r\n\r\n    // Return the hot deals\r\n    return NextResponse.json({ hotDeals }, { status: 200 });\r\n  } catch (error) {\r\n    console.error(\"Error fetching hot deals:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// POST request handler to create a new hot deal\r\nexport async function POST(request) {\r\n  try {\r\n    // Connect to the database\r\n    await dbConnect();\r\n\r\n    // Parse the incoming request body\r\n    const body = await request.json();\r\n    // console.log(body, 'body')\r\n    const { from, to, departure, returnDate, class: travelClass, priceFrom, type } = body;\r\n\r\n    // console.log(from, to, departure, returnDate, travelClass, priceFrom, type)\r\n\r\n    // Validate the incoming data (optional but recommended)\r\n    if (!from || !to || !departure || !returnDate || !travelClass || !priceFrom || !type) {\r\n      console.log('All fields are required')\r\n      return NextResponse.json(\r\n        { message: \"All fields are required\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create a new hot deal in the database\r\n    const newHotDeal = await HotDeal.create({\r\n      from,\r\n      to,\r\n      departure,\r\n      returnDate, // Ensure the field name matches your schema\r\n      class: travelClass,\r\n      priceFrom,\r\n      type,\r\n    });\r\n\r\n    // Return the created hot deal as a response\r\n    return NextResponse.json(\r\n      { message: \"Hot deal created successfully\", hotDeal: newHotDeal },\r\n      { status: 201 }\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error creating hot deal:\", error);\r\n    return NextResponse.json(\r\n      { message: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe;IACpB,IAAI;QACF,0BAA0B;QAC1B,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAS,AAAD;QAEd,sBAAsB;QACtB,MAAM,WAAW,MAAM,0HAAA,CAAA,UAAO,CAAC,IAAI,CAAC,CAAC;QACrC,wBAAwB;QAExB,uBAAuB;QACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAS,GAAG;YAAE,QAAQ;QAAI;IACvD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,0BAA0B;QAC1B,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAS,AAAD;QAEd,kCAAkC;QAClC,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,4BAA4B;QAC5B,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,UAAU,EAAE,OAAO,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG;QAEjF,6EAA6E;QAE7E,wDAAwD;QACxD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,eAAe,CAAC,aAAa,CAAC,MAAM;YACpF,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA0B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,MAAM,aAAa,MAAM,0HAAA,CAAA,UAAO,CAAC,MAAM,CAAC;YACtC;YACA;YACA;YACA;YACA,OAAO;YACP;YACA;QACF;QAEA,4CAA4C;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAiC,SAAS;QAAW,GAChE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}