{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n\r\nconst connectDB = async () => {\r\n  if (mongoose.connections[0].readyState) return;\r\n  await mongoose.connect(process.env.MONGODB_URI);\r\n};\r\n\r\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,YAAY;IAChB,IAAI,iGAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IACxC,MAAM,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW;AAChD;uCAEe"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/models/Agent.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst agentSchema = new mongoose.Schema({\r\n  title: { type: String, required: true },\r\n  name: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  phoneNumber: { type: String, required: true },\r\n  password: { type: String, required: true },\r\n  country: { type: String, required: true },\r\n  address: { type: String, required: true },\r\n  city: { type: String, required: true },\r\n  province: { type: String, required: true },\r\n  postalCode: { type: String, required: true },\r\n  certificateType: { type: String, required: true },\r\n  certificateNumber: { type: String, required: true },\r\n  message: { type: String },\r\n  referredBy: { type: String },\r\n  role: { type: String, default: 'agent' },\r\n  numberOfAgents: { type: Number },\r\n  agencyType: { type: String },\r\n  verified: { type: Boolean, default: false },\r\n});\r\n\r\nexport default mongoose.models.Agent || mongoose.model('Agent', agentSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,YAAY;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC3C,iBAAiB;QAAE,MAAM;QAAQ,UAAU;IAAK;IAChD,mBAAmB;QAAE,MAAM;QAAQ,UAAU;IAAK;IAClD,SAAS;QAAE,MAAM;IAAO;IACxB,YAAY;QAAE,MAAM;IAAO;IAC3B,MAAM;QAAE,MAAM;QAAQ,SAAS;IAAQ;IACvC,gBAAgB;QAAE,MAAM;IAAO;IAC/B,YAAY;QAAE,MAAM;IAAO;IAC3B,UAAU;QAAE,MAAM;QAAS,SAAS;IAAM;AAC5C;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/api/auth/login/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport dbConnect from '../../../lib/mongodb';\r\nimport Agent from '../../../models/Agent'; // Import the Agent model\r\nimport bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport async function POST(request) {\r\n  try {\r\n    console.log('Connecting to database...');\r\n    await dbConnect();\r\n    console.log('Database connected successfully');\r\n\r\n    const { email, password } = await request.json();\r\n\r\n    // Check if the email exists in the Agent collection\r\n    const user = await Agent.findOne({ email });\r\n\r\n    // If user is not found\r\n    if (!user) {\r\n      return NextResponse.json({ message: 'User not found' }, { status: 400 });\r\n    }\r\n\r\n    // Verify password\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) {\r\n      console.log('Invalid credentials');\r\n      return NextResponse.json({ message: 'Invalid credentials' }, { status: 400 });\r\n    }\r\n\r\n    // Determine the role (admin or agent)\r\n    const role = user.role; \r\n    // Generate JWT token\r\n    const token = jwt.sign({ id: user._id, role }, process.env.JWT_SECRET, {\r\n      expiresIn: '1d',\r\n    });\r\n\r\n    // Respond with token and user details\r\n    return NextResponse.json(\r\n      { message: 'Logged in successfully', token, user: { id: user._id, role } },\r\n      { status: 200 }\r\n    );\r\n  } catch (error) {\r\n    console.error('Error in POST function:', error);\r\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA,+MAA2C,yBAAyB;AACpE;AACA;;;;;;AAEO,eAAe,KAAK,OAAO;IAChC,IAAI;QACF,QAAQ,GAAG,CAAC;QACZ,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAS,AAAD;QACd,QAAQ,GAAG,CAAC;QAEZ,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,oDAAoD;QACpD,MAAM,OAAO,MAAM,wHAAA,CAAA,UAAK,CAAC,OAAO,CAAC;YAAE;QAAM;QAEzC,uBAAuB;QACvB,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,kBAAkB;QAClB,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAC5D,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC7E;QAEA,sCAAsC;QACtC,MAAM,OAAO,KAAK,IAAI;QACtB,qBAAqB;QACrB,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC;YAAE,IAAI,KAAK,GAAG;YAAE;QAAK,GAAG,QAAQ,GAAG,CAAC,UAAU,EAAE;YACrE,WAAW;QACb;QAEA,sCAAsC;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA0B;YAAO,MAAM;gBAAE,IAAI,KAAK,GAAG;gBAAE;YAAK;QAAE,GACzE;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF"}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}