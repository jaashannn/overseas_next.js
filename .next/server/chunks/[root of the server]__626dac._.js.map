{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/lib/mongodb.js"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n\r\nconst connectDB = async () => {\r\n  if (mongoose.connections[0].readyState) return;\r\n  await mongoose.connect(process.env.MONGODB_URI);\r\n};\r\n\r\nexport default connectDB;"],"names":[],"mappings":";;;AAAA;;AAGA,MAAM,YAAY;IAChB,IAAI,iGAAA,CAAA,UAAQ,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE;IACxC,MAAM,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW;AAChD;uCAEe"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/models/Agent.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst agentSchema = new mongoose.Schema({\r\n  title: { type: String, required: true },\r\n  name: { type: String, required: true },\r\n  email: { type: String, required: true, unique: true },\r\n  phoneNumber: { type: String, required: true },\r\n  password: { type: String, required: true },\r\n  country: { type: String, required: true },\r\n  address: { type: String, required: true },\r\n  city: { type: String, required: true },\r\n  province: { type: String, required: true },\r\n  postalCode: { type: String, required: true },\r\n  certificateType: { type: String },\r\n  certificateNumber: { type: String },\r\n  message: { type: String },\r\n  referredBy: { type: String },\r\n  role: { type: String, default: 'agent' },\r\n  numberOfAgents: { type: Number },\r\n  agencyType: { type: String },\r\n  verified: { type: Boolean, default: false },\r\n  ticoOrIataCertified: { type: String },\r\n  planPurchased: { type: String }, \r\n});\r\n\r\nexport default mongoose.models.Agent || mongoose.model('Agent', agentSchema);"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACtC,OAAO;QAAE,MAAM;QAAQ,UAAU;IAAK;IACtC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM;QAAQ,UAAU;QAAM,QAAQ;IAAK;IACpD,aAAa;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC5C,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,SAAS;QAAE,MAAM;QAAQ,UAAU;IAAK;IACxC,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;IACzC,YAAY;QAAE,MAAM;QAAQ,UAAU;IAAK;IAC3C,iBAAiB;QAAE,MAAM;IAAO;IAChC,mBAAmB;QAAE,MAAM;IAAO;IAClC,SAAS;QAAE,MAAM;IAAO;IACxB,YAAY;QAAE,MAAM;IAAO;IAC3B,MAAM;QAAE,MAAM;QAAQ,SAAS;IAAQ;IACvC,gBAAgB;QAAE,MAAM;IAAO;IAC/B,YAAY;QAAE,MAAM;IAAO;IAC3B,UAAU;QAAE,MAAM;QAAS,SAAS;IAAM;IAC1C,qBAAqB;QAAE,MAAM;IAAO;IACpC,eAAe;QAAE,MAAM;IAAO;AAChC;uCAEe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 278, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/lib/mailer.js"],"sourcesContent":["// lib/mailer.js\r\nimport nodemailer from 'nodemailer';\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  service: 'gmail', // or your email service\r\n  auth: {\r\n    user: process.env.EMAIL_USER, // your email address\r\n    pass: process.env.EMAIL_PASSWORD, // your email password\r\n  },\r\n});\r\n\r\nexport const sendEmail = async (to, subject, text) => {\r\n  const mailOptions = {\r\n    from: process.env.EMAIL_USER,\r\n    to,\r\n    subject,\r\n    text,\r\n  };\r\n\r\n  try {\r\n    await transporter.sendMail(mailOptions);\r\n    console.log(`Email sent to ${to}`);\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n  }\r\n};"],"names":[],"mappings":"AAAA,gBAAgB;;;;AAChB;;AAEA,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;IAC7C,SAAS;IACT,MAAM;QACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B,MAAM,QAAQ,GAAG,CAAC,cAAc;IAClC;AACF;AAEO,MAAM,YAAY,OAAO,IAAI,SAAS;IAC3C,MAAM,cAAc;QAClB,MAAM,QAAQ,GAAG,CAAC,UAAU;QAC5B;QACA;QACA;IACF;IAEA,IAAI;QACF,MAAM,YAAY,QAAQ,CAAC;QAC3B,QAAQ,GAAG,CAAC,CAAC,cAAc,EAAE,IAAI;IACnC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;IACxC;AACF"}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jasha/Downloads/overseas/travel_yt/app/api/auth/becomeanagent/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport dbConnect from '../../../lib/mongodb';\r\nimport Agent from '../../../models/Agent'; // Ensure this model exists\r\nimport bcrypt from 'bcryptjs'; // Import bcrypt for password hashing\r\nimport { sendEmail } from '../../../lib/mailer'; // Import the mailer utility\r\n\r\nexport async function POST(request) {\r\n  await dbConnect();\r\n\r\n  const {\r\n    title,\r\n    name,\r\n    email,\r\n    phoneNumber,\r\n    password, // Plain text password from the request\r\n    country,\r\n    address,\r\n    city,\r\n    province,\r\n    postalCode,\r\n    certificateType,\r\n    certificateNumber,\r\n    message,\r\n    referredBy,\r\n    role,\r\n    numberOfAgents,\r\n    agencyType,\r\n    ticoOrIataCertified\r\n  } = await request.json();\r\n\r\n  try {\r\n    // Check if agent already exists\r\n    const existingAgent = await Agent.findOne({ email });\r\n    if (existingAgent) {\r\n      return NextResponse.json({ message: 'Agent already exists' }, { status: 400 });\r\n    }\r\n\r\n    // Hash the password before saving\r\n    const salt = await bcrypt.genSalt(10); // Generate a salt\r\n    const hashedPassword = await bcrypt.hash(password, salt); // Hash the password\r\n\r\n    // Create a new agent with the hashed password\r\n    const agent = new Agent({\r\n      title,\r\n      name,\r\n      email,\r\n      phoneNumber,\r\n      password: hashedPassword, // Store the hashed password\r\n      country,\r\n      address,\r\n      city,\r\n      province,\r\n      postalCode,\r\n      certificateType,\r\n      certificateNumber,\r\n      message,\r\n      referredBy,\r\n      role,\r\n      numberOfAgents,\r\n      agencyType,\r\n      ticoOrIataCertified\r\n    });\r\n\r\n    await agent.save();\r\n\r\n    // Send email to the user\r\n    const userSubject = 'Thank you for signing up as an agent!';\r\n    const userText = `Dear ${name},\\n\\nThank you for signing up as an agent with us. We will review your application and get back to you shortly.\\n\\nBest regards,\\nYour Company`;\r\n    await sendEmail(email, userSubject, userText);\r\n\r\n    // Send email to the admin\r\n    const adminEmail = process.env.ADMIN_EMAIL; // Admin email address\r\n    const adminSubject = 'New Agent Signup';\r\n    const adminText = `A new agent has signed up:\\n\\nName: ${name}\\nEmail: ${email}\\nPhone: ${phoneNumber}\\nCountry: ${country}\\nAgency Type: ${agencyType}`;\r\n    await sendEmail(adminEmail, adminSubject, adminText);\r\n\r\n    // Respond with success\r\n    return NextResponse.json({ message: 'Agent created successfully', agent }, { status: 201 });\r\n  } catch (error) {\r\n    console.error('Error in POST function:', error);\r\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\r\n  }\r\n}\r\n\r\n// GET request handler to fetch all agents\r\nexport async function GET() {\r\n  try {\r\n    // Connect to the database\r\n    await dbConnect();\r\n\r\n    // Fetch all agents from the database\r\n    const agents = await Agent.find({});\r\n\r\n    // Return the agents as a response\r\n    return NextResponse.json({ agents }, { status: 200 });\r\n  } catch (error) {\r\n    console.error('Error fetching agents:', error);\r\n    return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA,+MAA2C,2BAA2B;AACtE,qOAA+B,qCAAqC;AACpE,2MAAiD,4BAA4B;;;;;;AAEtE,eAAe,KAAK,OAAO;IAChC,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAS,AAAD;IAEd,MAAM,EACJ,KAAK,EACL,IAAI,EACJ,KAAK,EACL,WAAW,EACX,QAAQ,EACR,OAAO,EACP,OAAO,EACP,IAAI,EACJ,QAAQ,EACR,UAAU,EACV,eAAe,EACf,iBAAiB,EACjB,OAAO,EACP,UAAU,EACV,IAAI,EACJ,cAAc,EACd,UAAU,EACV,mBAAmB,EACpB,GAAG,MAAM,QAAQ,IAAI;IAEtB,IAAI;QACF,gCAAgC;QAChC,MAAM,gBAAgB,MAAM,wHAAA,CAAA,UAAK,CAAC,OAAO,CAAC;YAAE;QAAM;QAClD,IAAI,eAAe;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAuB,GAAG;gBAAE,QAAQ;YAAI;QAC9E;QAEA,kCAAkC;QAClC,MAAM,OAAO,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,KAAK,kBAAkB;QACzD,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,OAAO,oBAAoB;QAE9E,8CAA8C;QAC9C,MAAM,QAAQ,IAAI,wHAAA,CAAA,UAAK,CAAC;YACtB;YACA;YACA;YACA;YACA,UAAU;YACV;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;QACF;QAEA,MAAM,MAAM,IAAI;QAEhB,yBAAyB;QACzB,MAAM,cAAc;QACpB,MAAM,WAAW,CAAC,KAAK,EAAE,KAAK,8IAA8I,CAAC;QAC7K,MAAM,CAAA,GAAA,sHAAA,CAAA,YAAS,AAAD,EAAE,OAAO,aAAa;QAEpC,0BAA0B;QAC1B,MAAM,aAAa,QAAQ,GAAG,CAAC,WAAW,EAAE,sBAAsB;QAClE,MAAM,eAAe;QACrB,MAAM,YAAY,CAAC,oCAAoC,EAAE,KAAK,SAAS,EAAE,MAAM,SAAS,EAAE,YAAY,WAAW,EAAE,QAAQ,eAAe,EAAE,YAAY;QACxJ,MAAM,CAAA,GAAA,sHAAA,CAAA,YAAS,AAAD,EAAE,YAAY,cAAc;QAE1C,uBAAuB;QACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAA8B;QAAM,GAAG;YAAE,QAAQ;QAAI;IAC3F,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF;AAGO,eAAe;IACpB,IAAI;QACF,0BAA0B;QAC1B,MAAM,CAAA,GAAA,uHAAA,CAAA,UAAS,AAAD;QAEd,qCAAqC;QACrC,MAAM,SAAS,MAAM,wHAAA,CAAA,UAAK,CAAC,IAAI,CAAC,CAAC;QAEjC,kCAAkC;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO,GAAG;YAAE,QAAQ;QAAI;IACrD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF"}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}